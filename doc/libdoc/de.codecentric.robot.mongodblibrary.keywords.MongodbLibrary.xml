<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20130611 08:41:32" format="ROBOT" type="library" name="de.codecentric.robot.mongodblibrary.keywords.MongodbLibrary">
<version></version>
<scope>global</scope>
<namedargs>no</namedargs>
<doc>This library supports mongodb-related testing using the Robot Framework.</doc>
<kw name="Collection Should Exist">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Fails if the collection does not exist.

Arguments:
- _collectionName_: the collection which should exist

Example:
| Collection Should Exist | myCol |</doc>
</kw>
<kw name="Connect To Server">
<arguments>
<arg>server</arg>
<arg>port</arg>
<arg>database</arg>
</arguments>
<doc>connects to the given MongoDB-Server

Arguments:
- _server_: server to connect
- _port_: port to connect
- _database_: database to connect

Example:
| Connect To Server | localhost | 27017 | robotdb |</doc>
</kw>
<kw name="Create Collection">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Creates a collection with the given name and options.

Arguments:
- _collectionName_: the name of the collection to create

Example:
| Create Collection | myCol |</doc>
</kw>
<kw name="Create Collection With Options">
<arguments>
<arg>collectionName</arg>
<arg>options</arg>
</arguments>
<doc>Creates a collection with the given name and options.

Arguments:
- _collectionName_: the name of the collection to create
- _options_: the options of the collection

Example:
| Create Collection | myCol | {capped:true, size:10000} |</doc>
</kw>
<kw name="Database Should Exist">
<arguments>
<arg>databaseName</arg>
</arguments>
<doc>Fails if the database does not exist.

Arguments:
- _databaseName_: the database which should exist

Example:
| Database Should Exist | myDatabase |</doc>
</kw>
<kw name="Document Should Exist">
<arguments>
<arg>collectionName</arg>
<arg>document</arg>
</arguments>
<doc>Fails if the given document does not exist in the given collection.

Arguments:
- _collectionName_: the collection within the document should exist
- _document_: the document which should exist in the given collection

Example:
| Document Should Exist | myCol | {say : 'Hello MongoDb!'} |</doc>
</kw>
<kw name="Drop Collection">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Drops the given collection.

Arguments:
- _collectionName_: the name of the collection to drop

Example:
| Drop Collection | myCollection |</doc>
</kw>
<kw name="Drop Database">
<arguments>
<arg>databaseName</arg>
</arguments>
<doc>A database in MongoDB is a more lightweight construct compared to RDBMS,
so a cleanup after testing can be done quite easily by dropping the whole database.

Arguments:
- _databaseName_: the name of the database to delete

Example:
| Drop Database | myDb |</doc>
</kw>
<kw name="Ensure Index">
<arguments>
<arg>collectionName</arg>
<arg>keys</arg>
</arguments>
<doc>Creates an index on the given collection, the desired fields of the index are given by the keys parameter.

Arguments:
- _collectionName_: the name of collection
- _keys_: an object with a key set of the fields desired for the index

Example:
| Ensure Index | myCol | {name : 1, street : 1} |</doc>
</kw>
<kw name="Ensure Index With Name">
<arguments>
<arg>indexName</arg>
<arg>collectionName</arg>
<arg>keys</arg>
</arguments>
<doc>Creates an index with given name on the given collection, the desired fields of the index are given by the keys parameter.

Arguments:
- _indexName_: the name of the index
- _collectionName_: the name of collection
- _keys_: an object with a key set of the fields desired for the index

Example:
| Ensure Index | myCol | {name : 1, street : 1} |</doc>
</kw>
<kw name="Ensure Unique Index">
<arguments>
<arg>collectionName</arg>
<arg>keys</arg>
<arg>indexName</arg>
</arguments>
<doc>Creates an unique index with given name on the given collection, the desired fields of the index are given by the keys parameter.

Arguments:
- _indexName_: the name of the index
- _collectionName_: the name of collection
- _keys_: an object with a key set of the fields desired for the index

Example:
| Ensure Index | myCol | {name : 1, street : 1} |</doc>
</kw>
<kw name="Get All Documents">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Returns all documents from the given collection.

Arguments:
- _collectionName_: the name of the collection

Example:
| Get All Documents | myCol |</doc>
</kw>
<kw name="Get Collection Count">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Returns the number of documents in the given collection.

Arguments:
- _collectionName_: the name of the collection

Example:
| Get Collection Count | myCol |</doc>
</kw>
<kw name="Get Collections">
<arguments>
</arguments>
<doc>Returns the names of the collections from the connected database.

Example:
| Get Collections |</doc>
</kw>
<kw name="Get Databases">
<arguments>
</arguments>
<doc>Returns the name of the databases from the server.

Example:
| Get Databases |</doc>
</kw>
<kw name="Get Documents">
<arguments>
<arg>collectionName</arg>
<arg>jsonString</arg>
</arguments>
<doc>Finds some documents in the given collection.

Arguments:
- _collectionName_: the name of the collection
- _jsonString_: the documents to find as JSON

Example:
| Get Documents | myCol | { age : { $gte: 23 } } |</doc>
</kw>
<kw name="Import Documents">
<arguments>
<arg>collectionName</arg>
<arg>file</arg>
</arguments>
<doc>Imports the documents from the given file into the given collection.

Arguments:
- _collectionName_: the name of the target collection
- _file_: the file that contains the documents

Example:
| Import Documents | myCol | /data/documents.json |</doc>
</kw>
<kw name="Import Documents Row Seperated">
<arguments>
<arg>collectionName</arg>
<arg>file</arg>
</arguments>
<doc>Imports the documents from the given file into the given collection. This keyword reads the data row-based.

Arguments:
- _collectionName_: the name of the target collection
- _file_: the file that contains the documents

Example:
| Import Documents Row Seperated | myCol | /data/documents.json |</doc>
</kw>
<kw name="Index Should Exist">
<arguments>
<arg>collectionName</arg>
<arg>indexName</arg>
</arguments>
<doc>Fails if the given index does not exist in the given collection.

Arguments:
- _collectionName_: the collection within the index should exist
- _index_: the name of the index which should exist in the given collection

Example:
| Index Should Exist | myCol | a_1_b_1 |</doc>
</kw>
<kw name="Insert Document">
<arguments>
<arg>collectionName</arg>
<arg>jsonString</arg>
</arguments>
<doc>Inserts the given document into the given collection.

Arguments:
- _collectionName_: the name of the target collection
- _jsonString_: the document to persist as JSON

Example:
| Insert Document | myCollection | {say : 'Hello MongoDB!'} |</doc>
</kw>
<kw name="Remove All Documents">
<arguments>
<arg>collectionName</arg>
</arguments>
<doc>Removes all documents in the given collection.

Arguments:
- _collectionName_: the name of the collection

Example:
| Remove All Documents | myCol |</doc>
</kw>
<kw name="Remove Documents">
<arguments>
<arg>collectionName</arg>
<arg>jsonString</arg>
</arguments>
<doc>Removes some documents in the given collection.

Arguments:
- _collectionName_: the name of the collection
- _jsonString_: the documents to remove as JSON

Example:
| Remove Documents | myCol | { age : { $gte: 23 } } |</doc>
</kw>
<kw name="Shutdown Embedded">
<arguments>
</arguments>
<doc>stops the previously started MongoDB-Server (counter-part to the keywords: `Startup Embedded` and `Startup Embedded On Port`)

Example:
| Shutdown Embedded |</doc>
</kw>
<kw name="Startup Embedded">
<arguments>
<arg>version</arg>
</arguments>
<doc>starts a MongoDB-Server in the given version

Arguments:
- _version_: MongoDB-Version

Example:
| Startup Embedded | 2.4.1 |</doc>
</kw>
<kw name="Startup Embedded On Port">
<arguments>
<arg>version</arg>
<arg>port</arg>
</arguments>
<doc>starts a MongoDB-Server in the given version on the given port

Arguments:
- _version_: MongoDB-Version
- _port_: port to use

Example:
| Startup Embedded | 2.4.1 | 27042 |</doc>
</kw>
<kw name="Update Documents">
<arguments>
<arg>collectionName</arg>
<arg>queryJsonString</arg>
<arg>newObjectJsonString</arg>
</arguments>
<doc>Updates some documents in the given collection.

Arguments:
- _collectionName_: the name of the collection
- _queryJsonString_: the documents to update as JSON
- _newObjectJsonString_: the updated document as JSON

Example:
| Update Documents | myCollection | { age : { $gte: 23 } } | {name : 'Mike', age : 22} |</doc>
</kw>
<kw name="Use Database">
<arguments>
<arg>databaseName</arg>
</arguments>
<doc>All following keywords will operate on the selected database. Same as use
dbname with the Mongo shell. If the database does not exist, it will be
create as soon as needed.

Arguments:
- _databaseName_: the name of the database

Example:
| Use Database | myDb |</doc>
</kw>
</keywordspec>
